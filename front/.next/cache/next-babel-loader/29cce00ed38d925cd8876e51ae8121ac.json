{"ast":null,"code":"import { all, fork, call, take, put, takeEvery, takeLatest, delay } from 'redux-saga/effects';\nimport axios from 'axios';\nimport { ADD_POST_FAILURE, ADD_POST_REQUEST, ADD_POST_SUCCESS, ADD_COMMENT_REQUEST, ADD_COMMENT_SUCCESS, ADD_COMMENT_FAILURE, generateDummyPost, LOAD_POSTS_FAILURE, LOAD_POSTS_REQUEST, LOAD_POSTS_SUCCESS, REMOVE_POST_FAILURE, REMOVE_POST_REQUEST, REMOVE_POST_SUCCESS } from '../reducers/post';\nimport { ADD_POST_TO_ME, REMOVE_POST_OF_ME } from '../reducers/user';\nfunction addPostAPI() {\n  return axios.post('/api/post');\n}\nfunction* addPost(action) {\n  try {\n    yield delay(1000);\n    console.log(action.data, 'asdsadsa');\n    // const result =yield call(logInAPI,action.data) //call은동기니깐 put할때까지 기다려준다\n    yield put({\n      type: ADD_POST_SUCCESS,\n      data: action.data\n    });\n  } catch (err) {\n    yield put({\n      type: ADD_POST_FAILURE,\n      data: err.response.data\n    });\n  }\n}\nfunction addCommentAPI() {\n  return axios.post('/api/COmment');\n}\nfunction* addComment(action) {\n  try {\n    yield delay(1000);\n    console.log(action.data, 'comment');\n    // const result =yield call(logInAPI,action.data) //call은동기니깐 put할때까지 기다려준다\n    // console.log()\n    yield put({\n      type: ADD_COMMENT_SUCCESS,\n      data: action.data\n    });\n  } catch (err) {\n    yield put({\n      type: ADD_COMMENT_FAILURE,\n      data: err.response.data\n    });\n  }\n}\nfunction* watchAddPost() {\n  yield takeLatest(ADD_POST_REQUEST, addPost);\n}\nfunction* watchAddComment() {\n  yield takeLatest(ADD_COMMENT_REQUEST, addComment);\n}\nexport default function* postSaga() {\n  yield all([fork(watchAddPost), fork(watchAddComment)]);\n}","map":{"version":3,"names":["all","fork","call","take","put","takeEvery","takeLatest","delay","axios","ADD_POST_FAILURE","ADD_POST_REQUEST","ADD_POST_SUCCESS","ADD_COMMENT_REQUEST","ADD_COMMENT_SUCCESS","ADD_COMMENT_FAILURE","generateDummyPost","LOAD_POSTS_FAILURE","LOAD_POSTS_REQUEST","LOAD_POSTS_SUCCESS","REMOVE_POST_FAILURE","REMOVE_POST_REQUEST","REMOVE_POST_SUCCESS","ADD_POST_TO_ME","REMOVE_POST_OF_ME","addPostAPI","post","addPost","action","console","log","data","type","err","response","addCommentAPI","addComment","watchAddPost","watchAddComment","postSaga"],"sources":["/Users/dong/dongprepare/front/sagas/post.js"],"sourcesContent":["\nimport {all,fork,call,take,put, takeEvery, takeLatest, delay} from 'redux-saga/effects'\n\nimport axios from 'axios'\n\n\nimport {\n  \n    ADD_POST_FAILURE,\n    ADD_POST_REQUEST,\n    ADD_POST_SUCCESS,\n    ADD_COMMENT_REQUEST,\n    ADD_COMMENT_SUCCESS,\n    ADD_COMMENT_FAILURE,\n    generateDummyPost,\n    LOAD_POSTS_FAILURE,\n    LOAD_POSTS_REQUEST,\n    LOAD_POSTS_SUCCESS,\n    REMOVE_POST_FAILURE,\n    REMOVE_POST_REQUEST,\n    REMOVE_POST_SUCCESS,\n  } from '../reducers/post';\n  import { ADD_POST_TO_ME, REMOVE_POST_OF_ME } from '../reducers/user';\n\n\nfunction addPostAPI(){\n    return axios.post('/api/post')\n}\n\n\n\nfunction* addPost(action){\n\n    try{\n        yield delay(1000)\n        console.log(action.data,'asdsadsa')\n        // const result =yield call(logInAPI,action.data) //call은동기니깐 put할때까지 기다려준다\n        yield put({\n            type:ADD_POST_SUCCESS,\n            data:action.data\n        })\n        \n    }catch(err){\n        yield put({\n            type: ADD_POST_FAILURE,\n            data:err.response.data,\n        })\n    }\n    \n}\n\n\n\nfunction addCommentAPI(){\n    return axios.post('/api/COmment')\n}\n\n\n\nfunction* addComment(action){\n\n    try{\n        yield delay(1000)\n        console.log(action.data,'comment')\n        // const result =yield call(logInAPI,action.data) //call은동기니깐 put할때까지 기다려준다\n        // console.log()\n        yield put({\n            type:ADD_COMMENT_SUCCESS,\n            data:action.data\n        })\n        \n    }catch(err){\n        yield put({\n            type: ADD_COMMENT_FAILURE,\n            data:err.response.data,\n        })\n    }\n    \n}\n\n\n\n\nfunction* watchAddPost(){\n    yield takeLatest(ADD_POST_REQUEST,addPost)\n    \n    \n}\nfunction* watchAddComment(){\n    yield takeLatest(ADD_COMMENT_REQUEST,addComment)\n    \n    \n}\n\n\n\nexport default function* postSaga(){\n \n    \n    yield all([\n       \n        fork(watchAddPost),\n        fork(watchAddComment),\n    ])\n\n}"],"mappings":"AACA,SAAQA,GAAG,EAACC,IAAI,EAACC,IAAI,EAACC,IAAI,EAACC,GAAG,EAAEC,SAAS,EAAEC,UAAU,EAAEC,KAAK,QAAO,oBAAoB;AAEvF,OAAOC,KAAK,MAAM,OAAO;AAGzB,SAEIC,gBAAgB,EAChBC,gBAAgB,EAChBC,gBAAgB,EAChBC,mBAAmB,EACnBC,mBAAmB,EACnBC,mBAAmB,EACnBC,iBAAiB,EACjBC,kBAAkB,EAClBC,kBAAkB,EAClBC,kBAAkB,EAClBC,mBAAmB,EACnBC,mBAAmB,EACnBC,mBAAmB,QACd,kBAAkB;AACzB,SAASC,cAAc,EAAEC,iBAAiB,QAAQ,kBAAkB;AAGtE,SAASC,UAAUA,CAAA,EAAE;EACjB,OAAOhB,KAAK,CAACiB,IAAI,CAAC,WAAW,CAAC;AAClC;AAIA,UAAUC,OAAOA,CAACC,MAAM,EAAC;EAErB,IAAG;IACC,MAAMpB,KAAK,CAAC,IAAI,CAAC;IACjBqB,OAAO,CAACC,GAAG,CAACF,MAAM,CAACG,IAAI,EAAC,UAAU,CAAC;IACnC;IACA,MAAM1B,GAAG,CAAC;MACN2B,IAAI,EAACpB,gBAAgB;MACrBmB,IAAI,EAACH,MAAM,CAACG;IAChB,CAAC,CAAC;EAEN,CAAC,QAAME,GAAG,EAAC;IACP,MAAM5B,GAAG,CAAC;MACN2B,IAAI,EAAEtB,gBAAgB;MACtBqB,IAAI,EAACE,GAAG,CAACC,QAAQ,CAACH;IACtB,CAAC,CAAC;EACN;AAEJ;AAIA,SAASI,aAAaA,CAAA,EAAE;EACpB,OAAO1B,KAAK,CAACiB,IAAI,CAAC,cAAc,CAAC;AACrC;AAIA,UAAUU,UAAUA,CAACR,MAAM,EAAC;EAExB,IAAG;IACC,MAAMpB,KAAK,CAAC,IAAI,CAAC;IACjBqB,OAAO,CAACC,GAAG,CAACF,MAAM,CAACG,IAAI,EAAC,SAAS,CAAC;IAClC;IACA;IACA,MAAM1B,GAAG,CAAC;MACN2B,IAAI,EAAClB,mBAAmB;MACxBiB,IAAI,EAACH,MAAM,CAACG;IAChB,CAAC,CAAC;EAEN,CAAC,QAAME,GAAG,EAAC;IACP,MAAM5B,GAAG,CAAC;MACN2B,IAAI,EAAEjB,mBAAmB;MACzBgB,IAAI,EAACE,GAAG,CAACC,QAAQ,CAACH;IACtB,CAAC,CAAC;EACN;AAEJ;AAKA,UAAUM,YAAYA,CAAA,EAAE;EACpB,MAAM9B,UAAU,CAACI,gBAAgB,EAACgB,OAAO,CAAC;AAG9C;AACA,UAAUW,eAAeA,CAAA,EAAE;EACvB,MAAM/B,UAAU,CAACM,mBAAmB,EAACuB,UAAU,CAAC;AAGpD;AAIA,eAAe,UAAUG,QAAQA,CAAA,EAAE;EAG/B,MAAMtC,GAAG,CAAC,CAENC,IAAI,CAACmC,YAAY,CAAC,EAClBnC,IAAI,CAACoC,eAAe,CAAC,CACxB,CAAC;AAEN"},"metadata":{},"sourceType":"module"}