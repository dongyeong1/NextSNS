{"ast":null,"code":"import shortId from 'shortid';\nimport faker from 'faker';\nimport produce from '../util/produce';\nexport var initialState = {\n  mainPosts: [],\n  imagePaths: [],\n  hasMorePosts: true,\n  loadPostsLoading: false,\n  loadPostsDone: false,\n  loadPostsError: null,\n  addPostLoading: false,\n  addPostDone: false,\n  addPostError: null,\n  removePostLoading: false,\n  removePostDone: false,\n  removePostError: null,\n  addCommentLoading: false,\n  addCommentDone: false,\n  addCommentError: null\n};\nexport var generateDummyPost = function generateDummyPost(number) {\n  return Array(number).fill().map(function () {\n    return {\n      id: shortId.generate(),\n      User: {\n        id: shortId.generate(),\n        nickname: faker.name.findName()\n      },\n      content: faker.lorem.paragraph(),\n      Images: [{\n        src: faker.image.image()\n      }],\n      Comments: [{\n        User: {\n          id: shortId.generate(),\n          nickname: faker.name.findName()\n        },\n        content: faker.lorem.sentence()\n      }]\n    };\n  });\n};\nexport var LOAD_POSTS_REQUEST = 'LOAD_POSTS_REQUEST';\nexport var LOAD_POSTS_SUCCESS = 'LOAD_POSTS_SUCCESS';\nexport var LOAD_POSTS_FAILURE = 'LOAD_POSTS_FAILURE';\nexport var ADD_POST_REQUEST = 'ADD_POST_REQUEST';\nexport var ADD_POST_SUCCESS = 'ADD_POST_SUCCESS';\nexport var ADD_POST_FAILURE = 'ADD_POST_FAILURE';\nexport var REMOVE_POST_REQUEST = 'REMOVE_POST_REQUEST';\nexport var REMOVE_POST_SUCCESS = 'REMOVE_POST_SUCCESS';\nexport var REMOVE_POST_FAILURE = 'REMOVE_POST_FAILURE';\nexport var ADD_COMMENT_REQUEST = 'ADD_COMMENT_REQUEST';\nexport var ADD_COMMENT_SUCCESS = 'ADD_COMMENT_SUCCESS';\nexport var ADD_COMMENT_FAILURE = 'ADD_COMMENT_FAILURE';\nexport var addPost = function addPost(data) {\n  return {\n    type: ADD_POST_REQUEST,\n    data: data\n  };\n};\nexport var addComment = function addComment(data) {\n  return {\n    type: ADD_COMMENT_REQUEST,\n    data: data\n  };\n};\nvar dummyPost = function dummyPost(data) {\n  return {\n    id: data.id,\n    content: data.content,\n    User: {\n      id: 1,\n      nickname: '제로초'\n    },\n    Images: [],\n    Comments: []\n  };\n};\nvar dummyComment = function dummyComment(data) {\n  return {\n    id: shortId.generate(),\n    content: data,\n    User: {\n      id: 1,\n      nickname: '제로초'\n    }\n  };\n};\n// 이전 상태를 액션을 통해 다음 상태로 만들어내는 함수(불변성은 지키면서)\nvar reducer = function reducer() {\n  var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : initialState;\n  var action = arguments.length > 1 ? arguments[1] : undefined;\n  return produce(state, function (draft) {\n    switch (action.type) {\n      case LOAD_POSTS_REQUEST:\n        draft.loadPostsLoading = true;\n        draft.loadPostsDone = false;\n        draft.loadPostsError = null;\n        break;\n      case LOAD_POSTS_SUCCESS:\n        draft.loadPostsLoading = false;\n        draft.loadPostsDone = true;\n        draft.mainPosts = action.data.concat(draft.mainPosts);\n        draft.hasMorePosts = draft.mainPosts.length < 50;\n        break;\n      case LOAD_POSTS_FAILURE:\n        draft.loadPostsLoading = false;\n        draft.loadPostsError = action.error;\n        break;\n      case ADD_POST_REQUEST:\n        draft.addPostLoading = true;\n        draft.addPostDone = false;\n        draft.addPostError = null;\n        break;\n      case ADD_POST_SUCCESS:\n        draft.addPostLoading = false;\n        draft.addPostDone = true;\n        draft.mainPosts.unshift(dummyPost(action.data));\n        break;\n      case ADD_POST_FAILURE:\n        draft.addPostLoading = false;\n        draft.addPostError = action.error;\n        break;\n      case REMOVE_POST_REQUEST:\n        draft.removePostLoading = true;\n        draft.removePostDone = false;\n        draft.removePostError = null;\n        break;\n      case REMOVE_POST_SUCCESS:\n        draft.removePostLoading = false;\n        draft.removePostDone = true;\n        draft.mainPosts = draft.mainPosts.filter(function (v) {\n          return v.id !== action.data;\n        });\n        break;\n      case REMOVE_POST_FAILURE:\n        draft.removePostLoading = false;\n        draft.removePostError = action.error;\n        break;\n      case ADD_COMMENT_REQUEST:\n        draft.addCommentLoading = true;\n        draft.addCommentDone = false;\n        draft.addCommentError = null;\n        break;\n      case ADD_COMMENT_SUCCESS:\n        {\n          var post = draft.mainPosts.find(function (v) {\n            return v.id === action.data.postId;\n          });\n          post.Comments.unshift(dummyComment(action.data.content));\n          draft.addCommentLoading = false;\n          draft.addCommentDone = true;\n          break;\n          // const postIndex = state.mainPosts.findIndex((v) => v.id === action.data.postId);\n          // const post = { ...state.mainPosts[postIndex] };\n          // post.Comments = [dummyComment(action.data.content), ...post.Comments];\n          // const mainPosts = [...state.mainPosts];\n          // mainPosts[postIndex] = post;\n          // return {\n          //   ...state,\n          //   mainPosts,\n          //   addCommentLoading: false,\n          //   addCommentDone: true,\n          // };\n        }\n\n      case ADD_COMMENT_FAILURE:\n        draft.addCommentLoading = false;\n        draft.addCommentError = action.error;\n        break;\n      default:\n        break;\n    }\n  });\n};\nexport default reducer;","map":{"version":3,"names":["shortId","faker","produce","initialState","mainPosts","imagePaths","hasMorePosts","loadPostsLoading","loadPostsDone","loadPostsError","addPostLoading","addPostDone","addPostError","removePostLoading","removePostDone","removePostError","addCommentLoading","addCommentDone","addCommentError","generateDummyPost","number","Array","fill","map","id","generate","User","nickname","name","findName","content","lorem","paragraph","Images","src","image","Comments","sentence","LOAD_POSTS_REQUEST","LOAD_POSTS_SUCCESS","LOAD_POSTS_FAILURE","ADD_POST_REQUEST","ADD_POST_SUCCESS","ADD_POST_FAILURE","REMOVE_POST_REQUEST","REMOVE_POST_SUCCESS","REMOVE_POST_FAILURE","ADD_COMMENT_REQUEST","ADD_COMMENT_SUCCESS","ADD_COMMENT_FAILURE","addPost","data","type","addComment","dummyPost","dummyComment","reducer","state","arguments","length","undefined","action","draft","concat","error","unshift","filter","v","post","find","postId"],"sources":["/Users/dong/dongprepare/front/reducers/post.js"],"sourcesContent":["import shortId from 'shortid';\nimport faker from 'faker';\n\nimport produce from '../util/produce';\n\nexport const initialState = {\n  mainPosts: [],\n  imagePaths: [],\n  hasMorePosts: true,\n  loadPostsLoading: false,\n  loadPostsDone: false,\n  loadPostsError: null,\n  addPostLoading: false,\n  addPostDone: false,\n  addPostError: null,\n  removePostLoading: false,\n  removePostDone: false,\n  removePostError: null,\n  addCommentLoading: false,\n  addCommentDone: false,\n  addCommentError: null,\n};\n\nexport const generateDummyPost = (number) => Array(number).fill().map(() => ({\n  id: shortId.generate(),\n  User: {\n    id: shortId.generate(),\n    nickname: faker.name.findName(),\n  },\n  content: faker.lorem.paragraph(),\n  Images: [{\n    src: faker.image.image(),\n  }],\n  Comments: [{\n    User: {\n      id: shortId.generate(),\n      nickname: faker.name.findName(),\n    },\n    content: faker.lorem.sentence(),\n  }],\n}));\n\nexport const LOAD_POSTS_REQUEST = 'LOAD_POSTS_REQUEST';\nexport const LOAD_POSTS_SUCCESS = 'LOAD_POSTS_SUCCESS';\nexport const LOAD_POSTS_FAILURE = 'LOAD_POSTS_FAILURE';\n\nexport const ADD_POST_REQUEST = 'ADD_POST_REQUEST';\nexport const ADD_POST_SUCCESS = 'ADD_POST_SUCCESS';\nexport const ADD_POST_FAILURE = 'ADD_POST_FAILURE';\n\nexport const REMOVE_POST_REQUEST = 'REMOVE_POST_REQUEST';\nexport const REMOVE_POST_SUCCESS = 'REMOVE_POST_SUCCESS';\nexport const REMOVE_POST_FAILURE = 'REMOVE_POST_FAILURE';\n\nexport const ADD_COMMENT_REQUEST = 'ADD_COMMENT_REQUEST';\nexport const ADD_COMMENT_SUCCESS = 'ADD_COMMENT_SUCCESS';\nexport const ADD_COMMENT_FAILURE = 'ADD_COMMENT_FAILURE';\n\nexport const addPost = (data) => ({\n  type: ADD_POST_REQUEST,\n  data,\n});\n\nexport const addComment = (data) => ({\n  type: ADD_COMMENT_REQUEST,\n  data,\n});\n\nconst dummyPost = (data) => ({\n  id: data.id,\n  content: data.content,\n  User: {\n    id: 1,\n    nickname: '제로초',\n  },\n  Images: [],\n  Comments: [],\n});\n\nconst dummyComment = (data) => ({\n  id: shortId.generate(),\n  content: data,\n  User: {\n    id: 1,\n    nickname: '제로초',\n  },\n});\n// 이전 상태를 액션을 통해 다음 상태로 만들어내는 함수(불변성은 지키면서)\nconst reducer = (state = initialState, action) => produce(state, (draft) => {\n  switch (action.type) {\n    case LOAD_POSTS_REQUEST:\n      draft.loadPostsLoading = true;\n      draft.loadPostsDone = false;\n      draft.loadPostsError = null;\n      break;\n    case LOAD_POSTS_SUCCESS:\n      draft.loadPostsLoading = false;\n      draft.loadPostsDone = true;\n      draft.mainPosts = action.data.concat(draft.mainPosts);\n      draft.hasMorePosts = draft.mainPosts.length < 50;\n      break;\n    case LOAD_POSTS_FAILURE:\n      draft.loadPostsLoading = false;\n      draft.loadPostsError = action.error;\n      break;\n    case ADD_POST_REQUEST:\n      draft.addPostLoading = true;\n      draft.addPostDone = false;\n      draft.addPostError = null;\n      break;\n    case ADD_POST_SUCCESS:\n      draft.addPostLoading = false;\n      draft.addPostDone = true;\n      draft.mainPosts.unshift(dummyPost(action.data));\n      break;\n    case ADD_POST_FAILURE:\n      draft.addPostLoading = false;\n      draft.addPostError = action.error;\n      break;\n    case REMOVE_POST_REQUEST:\n      draft.removePostLoading = true;\n      draft.removePostDone = false;\n      draft.removePostError = null;\n      break;\n    case REMOVE_POST_SUCCESS:\n      draft.removePostLoading = false;\n      draft.removePostDone = true;\n      draft.mainPosts = draft.mainPosts.filter((v) => v.id !== action.data);\n      break;\n    case REMOVE_POST_FAILURE:\n      draft.removePostLoading = false;\n      draft.removePostError = action.error;\n      break;\n    case ADD_COMMENT_REQUEST:\n      draft.addCommentLoading = true;\n      draft.addCommentDone = false;\n      draft.addCommentError = null;\n      break;\n    case ADD_COMMENT_SUCCESS: {\n      const post = draft.mainPosts.find((v) => v.id === action.data.postId);\n      post.Comments.unshift(dummyComment(action.data.content));\n      draft.addCommentLoading = false;\n      draft.addCommentDone = true;\n      break;\n      // const postIndex = state.mainPosts.findIndex((v) => v.id === action.data.postId);\n      // const post = { ...state.mainPosts[postIndex] };\n      // post.Comments = [dummyComment(action.data.content), ...post.Comments];\n      // const mainPosts = [...state.mainPosts];\n      // mainPosts[postIndex] = post;\n      // return {\n      //   ...state,\n      //   mainPosts,\n      //   addCommentLoading: false,\n      //   addCommentDone: true,\n      // };\n    }\n    case ADD_COMMENT_FAILURE:\n      draft.addCommentLoading = false;\n      draft.addCommentError = action.error;\n      break;\n    default:\n      break;\n  }\n});\n\nexport default reducer;"],"mappings":"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"},"metadata":{},"sourceType":"module"}