{"ast":null,"code":"import { all, fork, call, take, put, takeEvery, takeLatest, delay } from 'redux-saga/effects';\nimport axios from 'axios';\nimport { ADD_POST_FAILURE, ADD_POST_REQUEST, ADD_POST_SUCCESS, ADD_COMMENT_REQUEST, ADD_COMMENT_SUCCESS, ADD_COMMENT_FAILURE, generateDummyPost, LOAD_POSTS_FAILURE, LOAD_POSTS_REQUEST, LOAD_POSTS_SUCCESS, REMOVE_POST_FAILURE, REMOVE_POST_REQUEST, REMOVE_POST_SUCCESS } from '../reducers/post';\nimport { ADD_POST_TO_ME, REMOVE_POST_OF_ME } from '../reducers/user';\nimport shortid from 'shortid';\nfunction addPostAPI() {\n  return axios.post('/api/post');\n}\nfunction* addPost(action) {\n  try {\n    const id = shortid.generate();\n    yield delay(1000);\n    console.log(action.data, 'asdsadsa');\n    // const result =yield call(logInAPI,action.data) //call은동기니깐 put할때까지 기다려준다\n    yield put({\n      type: ADD_POST_SUCCESS,\n      data: {\n        content: action.data,\n        id\n      }\n    });\n    yield put({\n      type: ADD_POST_TO_ME,\n      data: id\n    });\n  } catch (err) {\n    yield put({\n      type: ADD_POST_FAILURE,\n      data: err.response.data\n    });\n  }\n}\nfunction removePostAPI() {\n  return axios.delete('/api/post');\n}\nfunction* removePost(action) {\n  try {\n    // const id=shortid.generate()\n    yield delay(1000);\n    // console.log(action.data,'asdsadsa')\n    // const result =yield call(logInAPI,action.data) //call은동기니깐 put할때까지 기다려준다\n    yield put({\n      type: REMOVE_POST_SUCCESS,\n      data: action.data\n    });\n    yield put({\n      type: REMOVE_POST_OF_ME,\n      data: action.data\n    });\n  } catch (err) {\n    yield put({\n      type: REMOVE_POST_FAILURE,\n      data: err.response.data\n    });\n  }\n}\nfunction addCommentAPI() {\n  return axios.post('/api/COmment');\n}\nfunction* addComment(action) {\n  try {\n    yield delay(1000);\n    console.log(action.data, 'comment');\n    // const result =yield call(logInAPI,action.data) //call은동기니깐 put할때까지 기다려준다\n    // console.log()\n    yield put({\n      type: ADD_COMMENT_SUCCESS,\n      data: action.data\n    });\n  } catch (err) {\n    if (err) {\n      console.log(err);\n    }\n    yield put({\n      type: ADD_COMMENT_FAILURE\n      // data:err.response.data,\n    });\n  }\n}\n\nfunction loadPostAPI() {\n  return axios.post('/api/COmment');\n}\nfunction* loadPost(action) {\n  try {\n    yield delay(1000);\n\n    // const result =yield call(logInAPI,action.data) //call은동기니깐 put할때까지 기다려준다\n    // console.log()\n    yield put({\n      type: LOAD_POSTS_REQUEST,\n      data: generateDummyPost(10)\n    });\n  } catch (err) {\n    if (err) {\n      console.log(err);\n    }\n    yield put({\n      type: LOAD_POSTS_FAILURE\n      // data:err.response.data,\n    });\n  }\n}\n\nfunction* watchRemovePost() {\n  yield takeLatest(REMOVE_POST_REQUEST, removePost);\n}\nfunction* watchAddPost() {\n  yield takeLatest(ADD_POST_REQUEST, addPost);\n}\nfunction* watchAddComment() {\n  yield takeLatest(ADD_COMMENT_REQUEST, addComment);\n}\nfunction* watchLoadPost() {\n  yield takeLatest(LOAD_POSTS_REQUEST, loadPost);\n}\nexport default function* postSaga() {\n  yield all([fork(watchRemovePost), fork(watchLoadPost), fork(watchAddPost), fork(watchAddComment)]);\n}","map":{"version":3,"names":["all","fork","call","take","put","takeEvery","takeLatest","delay","axios","ADD_POST_FAILURE","ADD_POST_REQUEST","ADD_POST_SUCCESS","ADD_COMMENT_REQUEST","ADD_COMMENT_SUCCESS","ADD_COMMENT_FAILURE","generateDummyPost","LOAD_POSTS_FAILURE","LOAD_POSTS_REQUEST","LOAD_POSTS_SUCCESS","REMOVE_POST_FAILURE","REMOVE_POST_REQUEST","REMOVE_POST_SUCCESS","ADD_POST_TO_ME","REMOVE_POST_OF_ME","shortid","addPostAPI","post","addPost","action","id","generate","console","log","data","type","content","err","response","removePostAPI","delete","removePost","addCommentAPI","addComment","loadPostAPI","loadPost","watchRemovePost","watchAddPost","watchAddComment","watchLoadPost","postSaga"],"sources":["/Users/dong/dongprepare/front/sagas/post.js"],"sourcesContent":["\nimport {all,fork,call,take,put, takeEvery, takeLatest, delay} from 'redux-saga/effects'\n\nimport axios from 'axios'\n\n\nimport {\n  \n    ADD_POST_FAILURE,\n    ADD_POST_REQUEST,\n    ADD_POST_SUCCESS,\n    ADD_COMMENT_REQUEST,\n    ADD_COMMENT_SUCCESS,\n    ADD_COMMENT_FAILURE,\n    generateDummyPost,\n    LOAD_POSTS_FAILURE,\n    LOAD_POSTS_REQUEST,\n    LOAD_POSTS_SUCCESS,\n    REMOVE_POST_FAILURE,\n    REMOVE_POST_REQUEST,\n    REMOVE_POST_SUCCESS,\n  } from '../reducers/post';\n  import { ADD_POST_TO_ME, REMOVE_POST_OF_ME } from '../reducers/user';\nimport shortid from 'shortid';\n\n\nfunction addPostAPI(){\n    return axios.post('/api/post')\n}\n\n\n\nfunction* addPost(action){\n\n    try{\n        const id=shortid.generate()\n        yield delay(1000)\n        console.log(action.data,'asdsadsa')\n        // const result =yield call(logInAPI,action.data) //call은동기니깐 put할때까지 기다려준다\n        yield put({\n            type:ADD_POST_SUCCESS,\n            data:{\n                content:action.data,\n                id\n            }\n        })\n        yield put({\n            type:ADD_POST_TO_ME,\n            data:id\n        })\n        \n    }catch(err){\n        yield put({\n            type: ADD_POST_FAILURE,\n            data:err.response.data,\n        })\n    }\n    \n}\n\n\n\nfunction removePostAPI(){\n    return axios.delete('/api/post')\n}\n\n\n\nfunction* removePost(action){\n\n    try{\n        // const id=shortid.generate()\n        yield delay(1000)\n        // console.log(action.data,'asdsadsa')\n        // const result =yield call(logInAPI,action.data) //call은동기니깐 put할때까지 기다려준다\n        yield put({\n            type:REMOVE_POST_SUCCESS,\n            data:action.data\n        })\n        yield put({\n            type:REMOVE_POST_OF_ME,\n            data:action.data\n        })\n        \n    }catch(err){\n        yield put({\n            type: REMOVE_POST_FAILURE,\n            data:err.response.data,\n        })\n    }\n    \n}\n\n\n\nfunction addCommentAPI(){\n    return axios.post('/api/COmment')\n}\n\n\n\nfunction* addComment(action){\n\n    try{\n        yield delay(1000)\n        console.log(action.data,'comment')\n        // const result =yield call(logInAPI,action.data) //call은동기니깐 put할때까지 기다려준다\n        // console.log()\n        yield put({\n            type:ADD_COMMENT_SUCCESS,\n            data:action.data\n        })\n        \n    }catch(err){\n        if(err){\n            console.log(err)\n        }\n        yield put({\n            type: ADD_COMMENT_FAILURE,\n            // data:err.response.data,\n        })\n    }\n    \n}\n\n\nfunction loadPostAPI(){\n    return axios.post('/api/COmment')\n}\n\n\n\nfunction* loadPost(action){\n\n    try{\n        yield delay(1000)\n        \n        // const result =yield call(logInAPI,action.data) //call은동기니깐 put할때까지 기다려준다\n        // console.log()\n        yield put({\n            type:LOAD_POSTS_REQUEST,\n            data:generateDummyPost(10)\n        })\n        \n    }catch(err){\n        if(err){\n            console.log(err)\n        }\n        yield put({\n            type: LOAD_POSTS_FAILURE,\n            // data:err.response.data,\n        })\n    }\n    \n}\n\n\n\n\nfunction* watchRemovePost(){\n    yield takeLatest(REMOVE_POST_REQUEST,removePost)\n    \n    \n}\nfunction* watchAddPost(){\n    yield takeLatest(ADD_POST_REQUEST,addPost)\n    \n    \n}\nfunction* watchAddComment(){\n    yield takeLatest(ADD_COMMENT_REQUEST,addComment)\n    \n    \n}\nfunction* watchLoadPost(){\n    yield takeLatest(LOAD_POSTS_REQUEST,loadPost)\n    \n    \n}\n\n\nexport default function* postSaga(){\n \n    \n    yield all([\n        fork(watchRemovePost),\n        fork(watchLoadPost),\n\n        fork(watchAddPost),\n        fork(watchAddComment),\n    ])\n\n}"],"mappings":"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"},"metadata":{},"sourceType":"module"}